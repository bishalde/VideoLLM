import os
import whisper
import faiss
import numpy as np
from sentence_transformers import SentenceTransformer
import streamlit as st
import pickle

# Initialize models
whisper_model = whisper.load_model("base")
embedding_model = SentenceTransformer("all-MiniLM-L6-v2")

# Directories for saving data
TRANSCRIPTS_DIR = "./transcripts"
EMBEDDINGS_DIR = "./embeddings"
os.makedirs(TRANSCRIPTS_DIR, exist_ok=True)
os.makedirs(EMBEDDINGS_DIR, exist_ok=True)

# Function to transcribe audio
def transcribe_audio(audio_path):
    result = whisper_model.transcribe(audio_path)
    transcript = [seg["text"] for seg in result["segments"]]
    segments = [{"start": seg["start"], "end": seg["end"], "text": seg["text"]} for seg in result["segments"]]
    return transcript, segments

# Function to generate embeddings
def generate_embeddings(transcript):
    return embedding_model.encode(transcript)

# Save transcript to file
def save_transcript(filename, transcript):
    with open(f"{TRANSCRIPTS_DIR}/{filename}.txt", "w") as f:
        f.write("\n".join(transcript))

# Save embeddings and segments
def save_data(filename, embeddings, segments):
    with open(f"{EMBEDDINGS_DIR}/{filename}.pkl", "wb") as f:
        pickle.dump({"embeddings": embeddings, "segments": segments}, f)

# Load embeddings and segments
def load_data(filename):
    try:
        with open(f"{EMBEDDINGS_DIR}/{filename}.pkl", "rb") as f:
            data = pickle.load(f)
        return data["embeddings"], data["segments"]
    except FileNotFoundError:
        return None, None

# Query embeddings
def query_transcript(embeddings, segments, query, k=3):
    query_embedding = embedding_model.encode([query])
    index = faiss.IndexFlatL2(embeddings.shape[1])
    index.add(embeddings)
    distances, indices = index.search(query_embedding, k)
    results = [{"start": segments[i]["start"], "text": segments[i]["text"]} for i in indices[0]]
    return results

# Streamlit app
st.title("Local Video/Audio Query App")

uploaded_file = st.file_uploader("Upload a video or audio file", type=["mp4", "mp3", "wav"])
query = st.text_input("Enter your query")

if st.button("Process"):
    if uploaded_file and query:
        filename = os.path.splitext(uploaded_file.name)[0]
        file_path = f"./{uploaded_file.name}"
        
        # Save uploaded file locally
        with open(file_path, "wb") as f:
            f.write(uploaded_file.read())
        
        embeddings, segments = load_data(filename)
        if embeddings is None:
            with st.spinner("Transcribing audio..."):
                transcript, segments = transcribe_audio(file_path)
                save_transcript(filename, transcript)

            with st.spinner("Generating embeddings..."):
                embeddings = generate_embeddings([seg["text"] for seg in segments])
                save_data(filename, embeddings, segments)

        with st.spinner("Processing query..."):
            results = query_transcript(embeddings, segments, query)
            st.success("Query processed successfully!")
            
            # Display results
            st.write("### Query Results:")
            for result in results:
                start_time = result["start"]
                st.write(f"**Match at {start_time}s:** {result['text']}")
    else:
        st.warning("Please upload a file and enter a query.")
